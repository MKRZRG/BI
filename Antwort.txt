Aufgabe 1
CREATE USER bi WITH PASSWORD '123456';

GRANT ALL PRIVILEGES ON DATABASE bi TO bi;
GRANT ALL ON SCHEMA public TO bi;
\z


Aufgabe 3
a)SELECT brand, COUNT(*) AS count
FROM shoes
GROUP BY brand
ORDER BY count DESC
LIMIT 5;

b)SELECT
      MAX(weight) AS max_weight,
      MIN(weight) AS min_weight
  FROM shoes;

  SELECT
      MAX(
              CASE
                  WHEN weight LIKE '%g' THEN CAST(REGEXP_REPLACE(weight, '[^0-9.]', '', 'g') AS DECIMAL)  -- Extraire le nombre en grammes
                  WHEN weight LIKE '%lbs' THEN CAST(REGEXP_REPLACE(weight, '[^0-9.]', '', 'g') AS DECIMAL) * 453.592 -- Convertir livres en grammes
                  ELSE NULL
                  END
      ) AS max_weight_grams,
      MIN(
              CASE
                  WHEN weight LIKE '%g' THEN CAST(REGEXP_REPLACE(weight, '[^0-9.]', '', 'g') AS DECIMAL)
                  WHEN weight LIKE '%lbs' THEN CAST(REGEXP_REPLACE(weight, '[^0-9.]', '', 'g') AS DECIMAL) * 453.592
                  ELSE NULL
                  END
      ) AS min_weight_grams
  FROM shoes;

c)SELECT DISTINCT prices_condition
 FROM shoes;

d)SELECT prices_condition, COUNT(*) AS count
  FROM shoes
  GROUP BY prices_condition;

e)SELECT DISTINCT prices_currency
  FROM shoes;

f)SELECT prices_currency, COUNT(*) AS count
  FROM shoes
  GROUP BY prices_currency
  ORDER BY count DESC;

g)SELECT brand, AVG(prices_amountmax) AS average_price
  FROM shoes
  WHERE prices_currency = 'USD'
  GROUP BY brand
  ORDER BY average_price DESC
  LIMIT 1;

h)SELECT prices_merchant, COUNT(*) AS count
  FROM shoes
  GROUP BY prices_merchant
  ORDER BY count DESC
  LIMIT 5;



  CREATE TABLE schuhverkauf (
                         id varchar(255),
                         brand VARCHAR(255),                -- Marque de la chaussure
                         prices_condition VARCHAR(50),             -- État de la chaussure
                         prices_amountmax DECIMAL(10,2),
                         prices_amountmin DECIMAL(10,2),
                         prices_currency VARCHAR(50),               -- Devise (par exemple, USD, EUR)
                         prices_merchant VARCHAR(255),              -- Plateforme de vente (par exemple, Walmart)
                         weight VARCHAR(50)               -- Poids de la chaussure
  );
  INSERT INTO schuhverkauf (id, brand, prices_condition, prices_amountmax, prices_amountmin, prices_currency, prices_merchant, weight)
  SELECT
      id,                         -- L'identifiant unique depuis la table shoes
      brand,                      -- Marque de la chaussure
      prices_condition,                  -- État de la chaussure (lié à prices_condition dans schuhverkauf)
      prices_amountmax,   -- On considère 'price' comme prix max (si c'est pertinent)
      prices_amountmin,   -- On insère le même prix comme prix min (si les prix min/max ne sont pas disponibles séparément)
      prices_currency,                   -- Devise (USD, EUR, etc.)
      prices_merchant AS prices_merchant, -- Plateforme de vente
      weight                      -- Poids de la chaussure
  FROM shoes;

Aufgabe 4
1. Affiliate-Marketing (Provisionen)

2. Werbeeinnahmen

3. Abonnements für Händler

Aufgabe 5
„Welche Schuhmarke oder Händler erzielt im Durchschnitt
den höchsten Preis pro verkauftem Paar?


Aufgabe 6
b)
fact_shoes (id, prices_amountmin, prices_amountmax, weight, brand_id, manufacturer_id, price_id, color_id, category_id, merchant_id, date_id, image_id)

dim_brand (brand_id, brand_name)

dim_manufacturer (manufacturer_id, manufacturer_name, manufacturernumber)

dim_price (price_id, prices_currency, prices_condition)

dim_color (color_id, colors)

dim_category (category_id, categories)

dim_merchant (merchant_id, merchants_name)

dim_date (date_id, dateadded, dateupdated)

dim_image (image_id, imageurls)

c)
SELECT
    b.brand,
    MAX(p.prices_amountmax) - MIN(p.prices_amountmin) AS price_range
FROM
    fact_shoes f
JOIN
    dim_brand b ON f.brand_id = b.brand_id
JOIN
    dim_price p ON f.price_id = p.price_id
GROUP BY
    b.brand
ORDER BY
    price_range DESC
LIMIT 1;


Aufgabe 7
Subjektorientiert: Es ist um zentrale Geschäftsobjekte wie Marken, Hersteller und Händler organisiert.

Integriert: Daten aus verschiedenen Quellen werden standardisiert und zentralisiert in den Dimensionstabellen gespeichert.

Zeitvariant: Es speichert historische Daten mit Zeitstempeln, um Trends über die Zeit zu analysieren.

Nicht-flüchtig: Daten werden einmal gespeichert und nicht überschrieben, neue Informationen werden als neue Datensätze hinzugefügt.

Aufgabe 8
-- Création de la table des faits
CREATE TABLE fact_shoes (
    id SERIAL PRIMARY KEY,  -- Clé primaire
    weight_id DECIMAL(10,2),   -- Poids
    brand_id INT,           -- Clé étrangère vers dim_brand
    manufacturer_id INT,    -- Clé étrangère vers dim_manufacturer
    price_id INT,           -- Clé étrangère vers dim_price
    color_id INT,           -- Clé étrangère vers dim_color
    category_id INT,        -- Clé étrangère vers dim_category
    merchant_id INT,        -- Clé étrangère vers dim_merchant
    date_id INT,            -- Clé étrangère vers dim_date
    image_id INT,           -- Clé étrangère vers dim_image
    FOREIGN KEY (brand_id) REFERENCES dim_brand(brand_id),
    FOREIGN KEY (manufacturer_id) REFERENCES dim_manufacturer(manufacturer_id),
    FOREIGN KEY (price_id) REFERENCES dim_price(price_id),
    FOREIGN KEY (color_id) REFERENCES dim_color(color_id),
    FOREIGN KEY (category_id) REFERENCES dim_category(category_id),
    FOREIGN KEY (merchant_id) REFERENCES dim_merchant(merchant_id),
    FOREIGN KEY (date_id) REFERENCES dim_date(date_id),
    FOREIGN KEY (image_id) REFERENCES dim_image(image_id)
    FOREIGN KEY (weight_id) REFERENCES dim_weight(weight_id)
);

-- Création de la table de dimension "brand"
CREATE TABLE dim_brand (
    brand_id SERIAL PRIMARY KEY,  -- Clé primaire
    brand VARCHAR(255) NOT NULL   -- Marque
);

-- Création de la table de dimension "manufacturer"
CREATE TABLE dim_manufacturer (
    manufacturer_id SERIAL PRIMARY KEY,  -- Clé primaire
    manufacturer VARCHAR(255) NOT NULL,   -- Fabricant
    manufacturernumber VARCHAR(255)       -- Numéro du fabricant
);

-- Création de la table de dimension "price"
CREATE TABLE dim_price (
    price_id SERIAL PRIMARY KEY,  -- Clé primaire
    prices_currency VARCHAR(10) NOT NULL,  -- Devise
    prices_condition VARCHAR(50) NOT NULL,  -- État
    prices_amountmin DECIMAL(10,2),          -- Prix minimum
    prices_amountmax DECIMAL(10,2)           -- Prix maximum
);

-- Création de la table de dimension "color"
CREATE TABLE dim_color (
    color_id SERIAL PRIMARY KEY,  -- Clé primaire
    colors VARCHAR(50) NOT NULL    -- Couleurs
);

-- Création de la table de dimension "category"
CREATE TABLE dim_category (
    category_id SERIAL PRIMARY KEY,  -- Clé primaire
    categories VARCHAR(255) NOT NULL  -- Catégories
);

-- Création de la table de dimension "merchant"
CREATE TABLE dim_merchant (
    merchant_id SERIAL PRIMARY KEY,  -- Clé primaire
    merchants_name VARCHAR(255) NOT NULL  -- Nom du marchand
);

-- Création de la table de dimension "date"
CREATE TABLE dim_date (
    date_id SERIAL PRIMARY KEY,  -- Clé primaire
    dateadded DATE NOT NULL,     -- Date d'ajout
    dateupdated DATE NOT NULL     -- Date de mise à jour
);

-- Création de la table de dimension "image"
CREATE TABLE dim_image (
    image_id SERIAL PRIMARY KEY,  -- Clé primaire
    imageurls TEXT NOT NULL        -- URLs des images
);


CREATE TABLE dim_weight (
    weight_id SERIAL PRIMARY KEY,  -- Clé primaire
    weight DECIMAL (10,2)        -- URLs des images
);








